
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS CloudFormation Sample Template EasyVPN_Server: Sample template showing how
  to create an instance with a single network interface and a static IP
  addresses in an existing VPC and setup the OpenVPN server environment. It
  assumes you have already created a VPC. **WARNING** This template creates an
  Amazon EC2 instance. You will be billed for the AWS resources used if you
  create a stack from this template.
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  InstanceType:
    Description: EasyServer EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - c4.large
      - c5.large
    ConstraintDescription: must be a valid EC2 instance type.
  VpcId:
    Type: 'AWS::EC2::VPC::Id'
    Description: VpcId of your existing Virtual Private Cloud (VPC)
    ConstraintDescription: must be the VPC Id of an existing Virtual Private Cloud.
  SubnetId:
    Type: 'AWS::EC2::Subnet::Id'
    Description: SubnetId of an existing public subnet in your Virtual Private Cloud (VPC)
    ConstraintDescription: must be an existing public subnet in the selected Virtual Private Cloud.
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
Mappings:
  AWSInstanceType2Arch:
    t2.micro:
      Arch: HVM64
    c4.large:
      Arch: HVM64
    c5.large:
      Arch: HVM64
  AWSRegionArch2AMI: 
    us-east-1: # Virginia
      HVM64: ami-467ca739
      Logs: 'arn:aws:logs'
    us-east-2: # Ohio
      HVM64: ami-976152f2
      Logs: 'arn:aws:logs'
    us-west-1: # Califonia
      HVM64: ami-46e1f226
      Logs: 'arn:aws:logs'
    us-west-2: # Oregon
      HVM64: ami-6b8cef13
      Logs: 'arn:aws:logs'
    ca-central-1: # Canada
      HVM64: ami-2f39bf4b
      Logs: 'arn:aws:logs'
    eu-west-1: # Ireland
      HVM64: ami-9cbe9be5
      Logs: 'arn:aws:logs'
    eu-west-2: # London
      HVM64: ami-c12dcda6
      Logs: 'arn:aws:logs'
    eu-west-3: # Paris
      HVM64: ami-cae150b7
      Logs: 'arn:aws:logs'
    eu-central-1: # Frankfurt
      HVM64: ami-1b316af0
      Logs: 'arn:aws:logs'
    ap-south-1: # Mumbai
      HVM64: ami-b46f48db
      Logs: 'arn:aws:logs'
    ap-southeast-1: # Sinpapore
      HVM64: ami-64260718
      Logs: 'arn:aws:logs'
    ap-southeast-2: # Sydney
      HVM64: ami-60a26a02
      Logs: 'arn:aws:logs'
    ap-northeast-1: # Tokyo
      HVM64: ami-28ddc154
      Logs: 'arn:aws:logs'
    ap-northeast-2: # Seoul
      HVM64: ami-efaf0181
      Logs: 'arn:aws:logs'
    sa-east-1: # Sao Paulo
      HVM64: ami-f09dcc9c
      Logs: 'arn:aws:logs'
    cn-north-1: # Beijing (China)
      HVM64: ami-d8578bb5
      Logs: 'arn:aws-cn:logs'
    cn-northwest-1: # Ningxia (China) 
      HVM64: ami-02f5e160
      Logs: 'arn:aws-cn:logs'
Resources:
  VPNServerEIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
  EIPAssoc1:
    Type: 'AWS::EC2::EIPAssociation'
    Properties:
      NetworkInterfaceId: !Ref Eth0
      AllocationId: !GetAtt 
        - VPNServerEIP
        - AllocationId
  SSHSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VpcId
      GroupDescription: Enable SSH access via port 22,icmp and VPN Server UDP 81-89, TCP 1200-1300
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref SSHLocation
        - IpProtocol: udp
          FromPort: '81'
          ToPort: '89'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '1200'
          ToPort: '1300'
          CidrIp: 0.0.0.0/0
        - IpProtocol: icmp
          FromPort: '-1'
          ToPort: '-1'
          CidrIp: 0.0.0.0/0
        - IpProtocol: '-1'
          FromPort: '-1'
          ToPort: '-1'
          CidrIp: 10.8.0.0/24
  EC2Instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !FindInMap 
        - AWSRegionArch2AMI
        - !Ref 'AWS::Region'
        - !FindInMap 
          - AWSInstanceType2Arch
          - !Ref InstanceType
          - Arch
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref Eth0
          DeviceIndex: '0'
      SourceDestCheck: 'false'
      Tags:
        - Key: Name
          Value: EasyVPNServer
      UserData:
        Fn::Base64: !Sub
          # Inital EasyVPN Server environment
          - |
            #!/bin/bash -xe
            yum install -y wget
            wget https://s3-ap-southeast-1.amazonaws.com/leopublic/templates/EasyVPN/EasyVPN_Server_Setup.sh
            /bin/bash ./EasyVPN_Server_Setup.sh ${PSK}
          - 
            PSK: !GetAtt TestCustomResource.PSK
  Eth0:
    Type: 'AWS::EC2::NetworkInterface'
    Properties:
      Description: eth0
      GroupSet:
        - !Ref SSHSecurityGroup
      SourceDestCheck: 'true'
      SubnetId: !Ref SubnetId
      Tags:
        - Key: Name
          Value: Interface 0
        - Key: Interface
          Value: eth0
  TestCustomResource:
    Type: 'Custom::TestCustomResourceWithLambda'
    Properties:
      ServiceToken: !GetAtt 
        - TestLambdaFunction
        - Arn
  TestLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.handler
      Role: !GetAtt 
        - TestLambdaExecutionRole
        - Arn
      Code:
        ZipFile: |
          from __future__ import print_function
          import cfnresponse
          import random
          import string
          print('Loading function')
          def handler(event, context):
            outputData = {}
            outputData['PSK'] = ''.join([random.choice(string.hexdigits) for n in range(512)])
            cfnresponse.send(event, context, cfnresponse.SUCCESS, outputData)
      Timeout: '10'
      MemorySize: '256'
      Runtime: python3.6
  TestLambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: cwlogs
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'logs:CreateLogGroup'
                Resource: !Join 
                  - ':'
                  - - !FindInMap 
                        - AWSRegionArch2AMI
                        - !Ref 'AWS::Region'
                        - Logs
                    - !Ref 'AWS::Region'
                    - !Ref 'AWS::AccountId'
                    - '*'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - !Join 
                    - ':'
                    - - !FindInMap 
                        - AWSRegionArch2AMI
                        - !Ref 'AWS::Region'
                        - Logs
                      - !Ref 'AWS::Region'
                      - !Ref 'AWS::AccountId'
                      - log-group
                      - /aws/lambda/*
                      - '*'
Outputs:
  InstanceId:
    Value: !Ref EC2Instance
    Description: Instance Id of newly created instance
  VPNServerIP:
    Value: !Ref VPNServerEIP
    Description: VPN Server EIP
  PSK:
    Value: !GetAtt 
      - TestCustomResource
      - PSK
Description: VPN PSK